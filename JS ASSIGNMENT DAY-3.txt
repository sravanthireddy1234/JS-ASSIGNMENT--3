                      js assignment day-3  

1.explore and explain variousmethods in console funtion
The console object can be accessed from any global object. Window on browsing scopes and WorkerGlobalScope as specific variants in workers via the property console. It's exposed as Window.console, and can be referenced as simply console. For example:

console.log("Failed to open the specified link")
METHODS
Methods
console.assert()
Log a message and stack trace to console if the first argument is false.
console.clear()
Clear the console.
console.count()
Log the number of times this line has been called with the given label.
console.countReset()
Resets the value of the counter with the given label.
console.debug()
Outputs a message to the console with the log level "debug".
console.dir()
Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.
console.dirxml()
Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.

console.error()
Outputs an error message. You may use string substitution and additional arguments with this method.
console.exception()  
An alias for error().
console.group()
Creates a new inline group, indenting all following output by another level. To move back out a level, call groupEnd().
console.groupCollapsed()
Creates a new inline group, indenting all following output by another level. However, unlike group() this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call groupEnd().
console.groupEnd()
Exits the current inline group.
console.info()
Informative logging of information. You may use string substitution and additional arguments with this method.
console.log()
For general output of logging information. You may use string substitution and additional arguments with this method.
console.profile() 
Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.
console.profileEnd() 
Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).
console.table()
Displays tabular data as a table.
console.time()
Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.
console.timeEnd()
Stops the specified timer and logs the elapsed time in seconds since it started.
console.timeLog()
Logs the value of the specified timer to the console.
console.timeStamp() 
Adds a marker to the browser's Timeline or Waterfall tool.
console.trace()
Outputs a stack trace.
console.warn()
Outputs a warning message. You may use string substitution and additional arguments with this method.
2.Var, let and const- what's the difference?


VAR
Before the advent of ES6, var declarations ruled as King. 
There are issues associated with variables declared with var though. 
That is why it was necessary for new ways to declare variables to emerge. 
First though, let us get to understand var more before we discuss one of such issues.

Scope of var

Scope essentially means where these variables are available for use. 
var declarations are globally scoped or function/locally scoped. 
It is globally scoped when a var variable is declared outside a function.
 This means that any variable that is declared with var outside a function block is available for use in the whole window. var is function scoped when it is declared within a function. This means that it is available and can be accessed only within that function.
To understand further, look at the example below.

    var greeter = "hey hi";

    function newFunction() {
        var hello = "hello";
    }

LET
let is preferred for variable declaration now. 
It's no surprise as it comes as an improvement to the var declarations.
 It also solves this problem that was raised in the last subheading.
 Let's consider why this is so.

let is block scoped

A block is chunk of code bounded by {}.
 A block lives in curly braces. Anything within curly braces is a block. 
So a variable declared in a block with the let is only available for use within that block.
Let me explain this with an example.
   let greeting = "say Hi";
   let times = 4;

CONST
Variables declared with the const maintain constant values.
 const declarations share some similarities with let declarations.

const declarations are block scoped

Like let declarations, const declarations can only be accessed within the block it was declared.

const cannot be updated or re-declared

This means that the value of a variable declared with const remains the same within its scope. It cannot be updated or re-declared. So if we declare a variable with const, we can neither do this
    const greeting = "say Hi";
    greeting = "say Hello instead";//error : Assignment to constant variable. 
nor this
    const greeting = "say Hi";
    const greeting = "say Hello instead";//error : Identifier 'greeting' has al




   if (times > 3) {
        let hello = "say Hello instead";
        console.log(hello);//"say Hello instead"
    }
   console.log(hello) // hello is not defined

3.JavaScript has seven types.
 Types are values that JavaScript can have. Below is a list of data types that JavaScript can have:

Number
String
Boolean
Undefined
Null
Object
Symbol
data-types-in-javascript

The ‘Symbol’ data type is new in JavaScript. It has been included in the ES6 version. We can find the type of value or data by using the ‘typeof’ JavaScript operator. The above data types in JavaScript are divided into two broad categories, primitive and non-primitive.

The Primitive Data types in JavaScript include Number, String, Boolean, Undefined, Null and Symbol.

The Non-Primitive data type has only one member i.e. the Object.

 

Difference Between Primitive and Non-Primitive Data Types in JavaScript
JavaScript primitive data types are data types that refer to a single value.

E.g. var a =5;

Here the variable ‘a’ is an integer data type and has a single integer value. The variable ‘a’ refers to a single value in memory. If we want to change the value of a, we would have to assign a new value to a.  Primitive data types are not mutable.

When we create a variable, it reserves a space for itself in the memory. The variable ‘a’ has space in memory which holds its value. When we try to change the value of ‘a’ by assigning another value like var a = 6, it doesn’t alter the value of the original a, it just creates a new variable ‘a’ with the new value 6.

We can assign the value of ‘a’ to another variable like this:

var a1=a;

Here the variable ‘a1’ is assigned the value of ‘a’, not the address of ‘a’ in memory.

Thus ‘a1’ now holds the same value as ‘a’.

We can compare the two variables ‘a’ and ‘a1’ as the two variables refer to the same value now.

Using the comparison operator will return a Boolean value of ‘true’.

a===a1 // equals to ‘true’ as ‘===’  checks both the value and type of these two variables are true.

 

JavaScript non-primitive types are objects. An object holds a reference/address of a single key-value pair or many key-value pairs. Whenever we refer to an object, we refer to an address in memory which contains the key-value pair. If we assign an object ‘object1’ to another object ‘object2’, we are actually assigning the address of ‘object1’ to ‘object2’ instead of the key-value pair which the ‘object1’ contains in memory. Let’s see below”.

var object1= {a:5, a1:6};

var object2 = object1;

The above statement assigns the address of object2 to object1, and not the value {a:5, a1:6}. Thus with this assignment ‘object1’ and ‘object2’ refer to the same address in memory.

When we compare these two objects, we find that both of them refer to the same address in memory.

object1===object2 //will return true, as both refer to the same address. If we compare two separate objects like below:

var object1= {a:5, a1:6};

var object2 = {a:5, a1:6};

This statement object1===object2 // would return a false because both the objects refer to two separate addresses in memory. When we compare two objects, we compare their addresses, not their values.

We have seen above in case of primitive data types, that when we assign the variable ‘a’ to variable ‘a1’, the value of ‘a’ is copied to ‘a1’, and not its address which happens in non-primitive data types.

Thus primitive data types refer to a ‘single value’ in an address in memory whereas non-primitive data types refer to the ‘address’ in memory which contains single or multiple key-value pair/s.



















 